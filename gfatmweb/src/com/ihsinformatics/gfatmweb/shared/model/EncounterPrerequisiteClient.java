/*
Copyright(C) 2016 Interactive Health Solutions, Pvt. Ltd.
This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 3 of the License (GPLv3), or any later version.
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Interactive Health Solutions, info@ihsinformatics.com
You can also access the license on the internet at the address: http://www.gnu.org/licenses/gpl-3.0.html

Interactive Health Solutions, hereby disclaims all copyright interest in this program written by the contributors.
 */

/**
 * @author owais.hussain@ihsinformatics.com
 */

package com.ihsinformatics.gfatmweb.shared.model;

// Generated Dec 9, 2015 9:08:22 PM by Hibernate Tools 3.4.0.CR1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * EncounterPrerequisite generated by hbm2java
 */
@Entity
@Table(name = "encounter_prerequisite", uniqueConstraints = @UniqueConstraint(columnNames = "uuid"))
public class EncounterPrerequisiteClient implements java.io.Serializable {

	/**
     * 
     */
	private static final long serialVersionUID = -1181354436790595845L;
	private Integer encounterPrerequisiteId;
	private UsersClient usersByCreatedBy;
	private EncounterTypeClient encounterTypeByEncounterTypeId;
	private EncounterTypeClient encounterTypeByPrerequisiteEncounterTypeId;
	private LocationClient locationByCreatedAt;
	private LocationClient locationByChangedAt;
	private UsersClient usersByChangedBy;
	private ElementClient element;
	private String shouldBeRegex;
	private String shouldNotBeRegex;
	private String description;
	private Date dateCreated;
	private Date dateChanged;
	private String uuid;

	public EncounterPrerequisiteClient() {
	}

	public EncounterPrerequisiteClient(EncounterTypeClient encounterTypeId,
			EncounterTypeClient preReqEncounterTypeId, ElementClient element,
			String shouldBeRegex, String shouldNotBeRegex) {
		this.encounterTypeByEncounterTypeId = encounterTypeId;
		this.encounterTypeByPrerequisiteEncounterTypeId = preReqEncounterTypeId;
		this.element = element;
		this.shouldBeRegex = shouldBeRegex;
		this.shouldNotBeRegex = shouldNotBeRegex;
	}

	public EncounterPrerequisiteClient(EncounterTypeClient encounterTypeId,
			EncounterTypeClient preReqEncounterTypeId, ElementClient element,
			String shouldBeRegex, String shouldNotBeRegex,
			UsersClient createdBy, LocationClient createdAt, Date dateCreated,
			String uuid) {
		this.encounterTypeByEncounterTypeId = encounterTypeId;
		this.encounterTypeByPrerequisiteEncounterTypeId = preReqEncounterTypeId;
		this.element = element;
		this.shouldBeRegex = shouldBeRegex;
		this.shouldNotBeRegex = shouldNotBeRegex;
		this.usersByCreatedBy = createdBy;
		this.locationByCreatedAt = createdAt;
		this.dateCreated = dateCreated;
		this.uuid = uuid;
	}

	public EncounterPrerequisiteClient(UsersClient usersByCreatedBy,
			EncounterTypeClient encounterTypeByEncounterTypeId,
			EncounterTypeClient encounterTypeByPrerequisiteEncounterTypeId,
			LocationClient locationByCreatedAt,
			LocationClient locationByChangedAt, UsersClient usersByChangedBy,
			ElementClient element, String shouldBeRegex,
			String shouldNotBeRegex, String description, Date dateCreated,
			Date dateChanged, String uuid) {
		this.usersByCreatedBy = usersByCreatedBy;
		this.encounterTypeByEncounterTypeId = encounterTypeByEncounterTypeId;
		this.encounterTypeByPrerequisiteEncounterTypeId = encounterTypeByPrerequisiteEncounterTypeId;
		this.locationByCreatedAt = locationByCreatedAt;
		this.locationByChangedAt = locationByChangedAt;
		this.usersByChangedBy = usersByChangedBy;
		this.element = element;
		this.shouldBeRegex = shouldBeRegex;
		this.shouldNotBeRegex = shouldNotBeRegex;
		this.description = description;
		this.dateCreated = dateCreated;
		this.dateChanged = dateChanged;
		this.uuid = uuid;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "encounter_prerequisite_id", unique = true, nullable = false)
	public Integer getEncounterPrerequisiteId() {
		return this.encounterPrerequisiteId;
	}

	public void setEncounterPrerequisiteId(Integer encounterPrerequisiteId) {
		this.encounterPrerequisiteId = encounterPrerequisiteId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "created_by")
	public UsersClient getUsersByCreatedBy() {
		return this.usersByCreatedBy;
	}

	public void setUsersByCreatedBy(UsersClient usersByCreatedBy) {
		this.usersByCreatedBy = usersByCreatedBy;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "encounter_type_id", nullable = false)
	public EncounterTypeClient getEncounterTypeByEncounterTypeId() {
		return this.encounterTypeByEncounterTypeId;
	}

	public void setEncounterTypeByEncounterTypeId(
			EncounterTypeClient encounterTypeByEncounterTypeId) {
		this.encounterTypeByEncounterTypeId = encounterTypeByEncounterTypeId;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "prerequisite_encounter_type_id")
	public EncounterTypeClient getEncounterTypeByPrerequisiteEncounterTypeId() {
		return this.encounterTypeByPrerequisiteEncounterTypeId;
	}

	public void setEncounterTypeByPrerequisiteEncounterTypeId(
			EncounterTypeClient encounterTypeByPrerequisiteEncounterTypeId) {
		this.encounterTypeByPrerequisiteEncounterTypeId = encounterTypeByPrerequisiteEncounterTypeId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "created_at")
	public LocationClient getLocationByCreatedAt() {
		return this.locationByCreatedAt;
	}

	public void setLocationByCreatedAt(LocationClient locationByCreatedAt) {
		this.locationByCreatedAt = locationByCreatedAt;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "changed_at")
	public LocationClient getLocationByChangedAt() {
		return this.locationByChangedAt;
	}

	public void setLocationByChangedAt(LocationClient locationByChangedAt) {
		this.locationByChangedAt = locationByChangedAt;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "changed_by")
	public UsersClient getUsersByChangedBy() {
		return this.usersByChangedBy;
	}

	public void setUsersByChangedBy(UsersClient usersByChangedBy) {
		this.usersByChangedBy = usersByChangedBy;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "element_id")
	public ElementClient getElement() {
		return this.element;
	}

	public void setElement(ElementClient element) {
		this.element = element;
	}

	@Column(name = "should_be_regex")
	public String getShouldBeRegex() {
		return this.shouldBeRegex;
	}

	public void setShouldBeRegex(String shouldBeRegex) {
		this.shouldBeRegex = shouldBeRegex;
	}

	@Column(name = "should_not_be_regex")
	public String getShouldNotBeRegex() {
		return this.shouldNotBeRegex;
	}

	public void setShouldNotBeRegex(String shouldNotBeRegex) {
		this.shouldNotBeRegex = shouldNotBeRegex;
	}

	@Column(name = "description")
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_created", nullable = false, length = 19)
	public Date getDateCreated() {
		return this.dateCreated;
	}

	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_changed", length = 19)
	public Date getDateChanged() {
		return this.dateChanged;
	}

	public void setDateChanged(Date dateChanged) {
		this.dateChanged = dateChanged;
	}

	@Column(name = "uuid", unique = true, nullable = false, length = 38)
	public String getUuid() {
		return this.uuid;
	}

	public void setUuid(String uuid) {
		this.uuid = uuid;
	}

	@Override
	public String toString() {
		return encounterPrerequisiteId + ", " + encounterTypeByEncounterTypeId
				+ ", " + encounterTypeByPrerequisiteEncounterTypeId + ", "
				+ element + ", " + shouldBeRegex + ", " + shouldNotBeRegex
				+ ", " + description + ", " + dateCreated + ", " + dateChanged
				+ ", " + uuid;
	}

}
