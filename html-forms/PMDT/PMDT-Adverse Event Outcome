<htmlform>
	<!-- Autogenerated example form  (template from 01-Nov-2010 -->
	<macros>
		paperFormId = (Fill this in)
		headerColor =#009d8e
		fontOnHeaderColor = white
	</macros>

	<style>
		.section {
			border: 1px solid $headerColor;
			padding: 2px;
			text-align: left;
			margin-bottom: 1em;
		}
		.sectionHeader {
			background-color: $headerColor;
			color: $fontOnHeaderColor;
			display: block;
			padding: 2px;
			font-weight: bold;
		}
		table.baseline-aligned td {
			vertical-align: baseline;
		}
	</style>

	<span style="float:right">Paper Form ID: $paperFormId</span>
	<h2>PMDT-Adverse Event Outcome (v0.0.1)</h2>

	<section headerLabel="1. Encounter Details">
		<table class="baseline-aligned">
			<tr>
				<td>Date:</td>
				<td><encounterDate default="today"/></td>
			</tr>
			<tr>
				<td>Location:</td>
				<td><encounterLocation default="2"  tags="PMDT" /></td>
			</tr>
			<tr>
				<td>Provider:</td>
				<td><encounterProvider default="currentUser" type="autocomplete"/></td>
			</tr>
			
			<tr>
				<td>Adverse Event ID and Term:</td>
				<td><select id="adverse_event_id_term_list"><option>Please Select Adverse Event ID and Term</option>			   
				</select>
				<obs conceptId="166075" id="adverse_event_id_term"  size="60" required="true" /></td>
			</tr>
			<tr>
				<td>Date of Adverse Event onset</td>
				<td><obs id="date_adverse_event_onset" conceptId="165198"  required="true" /></td>
			</tr>
		
		</table>
	</section>
	
	<section headerLabel="2. Adverse Event Outcome">
		<div>	

		<p>
		Did this Adverse Event become serious during the observation period?
		<br/>
		<obs id="adverse_event_outcome_serious" conceptId="165324" answerConceptIds="1065,1066" answerLabels="Yes,No" defaultValue="1066" required="true"/>
		</p>
		
		<div id="display_adverse_event_serious_criterion">
		<p>
		If yes, then seriousness criterion:
		<br/>
		<obs id="adverse_event_serious_criterion" conceptId="162760" answerConceptIds="165318,165319,162693,165320,119975,165321" answerLabels="Hospitalization required / prolonged,Death,Life threatening,Persistent or significant disability / incapacity,Congenital abnormality,Otherwise medically important" defaultValue="165318"/>
		</p>
		</div>

		<p>
		Date of Adverse Outcome
		<br/>
		<obs id="date_adverse_event_outcome" conceptId="165326" defaultValue="today" required="true" />
		</p>

		<p>
		Adverse Event outcome:
		<br/>
		<obs id="adverse_event_outcome" conceptId="162875" answerConceptIds="162819,165327,6097,162873,165328,1067" answerLabels="Fatal,Not resolved,Resolved,Resolved with sequelae,Resolving,Unknown" defaultValue="6097" required="true" />
		</p>

		<p>
		Was this adverse event related to any of the TB drugs in the patient's regimen?
		<br/>
		<obs id="tb_drug_related_adverse_event" conceptId="165329" answerConceptIds="1065,1066" answerLabels="Yes,No" defaultValue="1065"/>
		</p>
		
			<!--<p>
		Number of drugs this event is related to?
		<br/>
		<obs id="number_of_drugs_event_related" conceptId="166076"   maxlength="2"/>
		</p>-->
		
		<div id="repeat_container">
		<repeat>
		<template>
		 
		<div id="{n}-toggleContainer" class="{n}-toggleContainer"   >
        <obsgroup groupingConceptId="166077">
			<p>
			TB drug treatment
			<br/>
			<obs id="{n}-tb_regimen" conceptId="160021"  
			answerConceptIds = "71060,450,163143,72794,73449,73498,73581,74123,163144,75948,75976,76835,76862,164086,104315,78280,78385,78788,78879,79611,80133,80363,80792,81022,81457,81458,82772,82900,82912,83352,767,83360,84206,84360,84836,160019,160020,164805"
			answerLabels="Amikacin,Amoxicillin and Clavulanate acid,Bedaquiline,Capreomycin,Ciprofloxacin,Clarithromycin,Clofazimine,Cycloserine,Delamanid,Ethambutol,Ethionamide,Gatifloxacin,Gemifloxacin,High Dose Isoniazid,Imipenem and cilastatin,Isoniazid,Kanamycin,Levofloxacin,Linezolid,Meropenem,Moxifloxacin,Nalidixic Acid,Norfloxacin,Ofloxacin,P-Aminosalicylic Acid,P-Aminosalicylic Acid Monosodium,Prothionamide,Pyrazinamide,Pyridoxine,Rifabutin,Rifampicin,Rifapentine,Sparfloxacin,Streptomycin,Terizidone,Thioacetazone,Viomycin,OTHER TB DRUGS"
			/>
			</p> 
			<p>
			TB drug {n}: Final action taken
			<br/>
			<obs id="{n}-ae_related_tb_drug_action" conceptId="165334" answerConceptIds="165330,165331,165332,165333" answerLabels="Dose maintained,Dose reduced,Drug permanently withdrawn,Drug interrupted"  />
			</p>
        </obsgroup>
			<button id="{n}-addEntry" class="addEntry">Add</button>
			<button id="{n}-removeEntry" class="removeEntry">Remove</button>
		</div>
		</template>
		<render n="1" />
		<render n="2" />
		<render n="3" />
		<render n="4" />
		<render n="5" />
		<render n="6" />
		<render n="7" />
		<render n="8" />
		<render n="9" />
		<render n="10" />
		 </repeat>
		 </div>
		 
		<div id="display_adverse_event_other_cause">
		<p>
		What are other causal factors
		<br/>
		<div id="display_adverse_event_other_cause_child">
			<obsgroup  id="adverse_event_other_cause" groupingConceptId="165335" >					
				<obs conceptId="165335" id="non_tb_drugs" answerConceptId= "165048" answerLabel="Non TB drugs" style="checkbox"  /><br/>						
				<obs conceptId="165335" id="comorbidity" answerConceptId= "164459" answerLabel="Co morbidity" style="checkbox" defaultValue="164459" /><br/>					
				<obs conceptId="165335" id="other" answerConceptId= "5622" answerLabel="Other" style="checkbox" /><br/>					 
				<obs conceptId="165335" id="none" answerConceptId= "1107" answerLabel="None" style="checkbox" /><br/>						                        						 
			</obsgroup>	
		</div>
		</p>
		</div>

		<p>
		Clinician notes
		<br/>
		<obs id="doctor_notes" conceptId="164237" maxlength="255" style="textarea"/>
		</p>
		
		<div id="time_taken_div">
		<p> 
		Time taken to fill form
		<br/>
		<obs id="time_taken" conceptId="165044" />
		</p>
		</div>
		
		</div>
	</section>

	<submit/>
	
	<script type="text/javascript">
		var startDate = new Date();	
		var adverse_event_serious_criterion = jQuery("#display_adverse_event_serious_criterion");
		var adverse_event_other_cause_check=false;
		
		var repeat_container =jQuery("#repeat_container");
		var repeatLimit=11;

jQuery( document ).ready(function() {
	
		getField("adverse_event_id_term.value").prop("disabled", true);
		getField("date_adverse_event_onset.value").prop("disabled", true);

		var timeTakenDiv = jQuery("#time_taken_div");
		timeTakenDiv.hide();
		
		<ifMode mode='VIEW' include="false"> 
			//1
			/*if(isAdverseEventFormFilled()){		
				setValue("date_adverse_event_onset.value",getAdverseEventOnsetDate());
				getAdverseEventIdsAndTerms();
			}
			else{
				alert("Please fill PMDT-Adverse Event Form first");
			}*/
			getAdverseEventIdsAndTerms();
			//1
						
			if(getValue('adverse_event_outcome_serious.value') == 1065 ){
				adverse_event_serious_criterion.show();
			}			
			else{
				adverse_event_serious_criterion.hide();
			}
			
			if(getValue('tb_drug_related_adverse_event.value') == 1065 ){
				repeat_container.show();
			}			
			else{
				repeat_container.hide();
			}
		</ifMode>
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////
		//repeat logic start
		
		$j('#1-removeEntry').remove();
		$j('#10-addEntry').remove();
		
		<ifMode mode='ENTER' include="true"> 		
			
			//show 1st repeat box and hide all others in enter mode as values are not retrived 
			for(var i=2; i &lt; repeatLimit; i++ ){
				jQuery("#"+i+"-toggleContainer").toggle(false);
			}			
		</ifMode>
		
		<ifMode mode='EDIT' include="true"> 				
			
			//show and hide repeat boxes acc to values as values are retrived during EDIT mode
			for(var i=1; i &lt; repeatLimit; i++ ){
				if( getValue((i)+'-tb_regimen.value') == "" ){
					jQuery("#"+i+"-toggleContainer").toggle(false);
				}
				else{
					jQuery("#"+i+"-toggleContainer").toggle(true);
				}
			}  
		</ifMode>
		
		<ifMode mode='View' include="true"> 			
			for(var i=1; i &lt; repeatLimit; i++ ){
				if(jQuery("#"+i+'-tb_regimen > span ').hasClass('value'))
				{
					jQuery("#"+i+"-toggleContainer").toggle(true);
				}
				else{
					jQuery("#"+i+"-toggleContainer").toggle(false);
				}
			}			
		</ifMode>
		
		});

<ifMode mode='VIEW' include="false">
			
	$j(document).ready(function(){
      $j('button.addEntry').live("click", function(){
      var correctedAddButtonId = parseFloat(this.id) + 1;
      var contentAddId = "#" + correctedAddButtonId + "-toggleContainer";
      $j(contentAddId).toggle(true);
      $j('#' + this.id).toggle(false); $j('#' + parseFloat(this.id) + '-removeEntry').toggle(false);
      return false;});
	  
    });
 
     $j(document).ready(function(){
      $j('button.removeEntry').live("click", function(){
      var correctedRemoveButtonId = parseFloat(this.id) - 1;
      var contentAddId = "#" + parseFloat(this.id) + "-toggleContainer";
      $j(contentAddId).toggle(false);
      $j( ':input:not(:button)', contentAddId).val([]);
      $j('#' + correctedRemoveButtonId + '-addEntry').toggle(true); $j('#' + correctedRemoveButtonId + '-removeEntry').toggle(true);
 
	//remove values of removed repeat boxes
	  setValue((correctedRemoveButtonId+1)+'-tb_regimen.value','');
	  setValue((correctedRemoveButtonId+1)+'-ae_related_tb_drug_action.value','');
 
      return false;});
 
    });
</ifMode>
	//repeat logic end
	//////////////////////////////////////////////////////////////////////////////////////////////////////////
	
//2
function getAdverseEventIdsAndTerms(){
		var allAdverseEncountersIdsAndTerms = "<lookup complexExpression="#foreach($encounter in $fn.allEncounters('77b4254d-afab-4b3a-aff3-584e79b2c1e5'))  $fn.getObs($encounter, '166075').getValueAsString($!{locale}) #end"/>";		
		var allAdverseEncountersIdsAndTermsResults = allAdverseEncountersIdsAndTerms.replace(/\s\s+/g, '@');
        var allAdverseEncountersIdsAndTermsResultsArray = allAdverseEncountersIdsAndTermsResults.split('@');

		var allAdverseOutcomeEncountersIdsAndTerms = "<lookup complexExpression="#foreach($encounter in $fn.allEncounters('4e17094b-13f4-46c4-b6fa-bafe544be791'))  $fn.getObs($encounter, '166075').getValueAsString($!{locale}) #end"/>";		
		var allAdverseOutcomeEncountersIdsAndTermsResults = allAdverseOutcomeEncountersIdsAndTerms.replace(/\s\s+/g, '@');
        var allAdverseOutcomeEncountersIdsAndTermsResultsArray = allAdverseOutcomeEncountersIdsAndTermsResults.split('@');
		
		var adverseEventIdsAndTerms=[];
		var count=0;
		//if adverse outcome form is not filled then add all adverse event reported in list
		if(allAdverseOutcomeEncountersIdsAndTermsResultsArray.length==1){
			console.log(" adverse out not filled");
			for(k = 1; k &lt; allAdverseEncountersIdsAndTermsResultsArray.length; k++){
				adverseEventIdsAndTerms[count]=allAdverseEncountersIdsAndTermsResultsArray[k];
				count++;
				console.log(" adverse array "+k+" : "+allAdverseEncountersIdsAndTermsResultsArray[k]);
			}
		}
		//else if advese outcome form is filled then campare adverse event and adverse outcome terms and make list for AE that are not finished yet
		else{
			console.log(" adverse out filled");
			for(i = 1; i &lt; allAdverseEncountersIdsAndTermsResultsArray.length; i++){	
				var found = false;
				for(j = 1; j &lt; allAdverseOutcomeEncountersIdsAndTermsResultsArray.length; j++){
					if(allAdverseEncountersIdsAndTermsResultsArray[i].trim()==allAdverseOutcomeEncountersIdsAndTermsResultsArray[j].trim()){
						found = true;
						console.log("found at i "+i+" at j "+j+allAdverseEncountersIdsAndTermsResultsArray[i].trim()+"=="+allAdverseOutcomeEncountersIdsAndTermsResultsArray[j].trim());
					}	
				}
				if(!found){
					//if not found then it means that that particalur AE outcome is not finsihed yet. so add it to list of active AE.
					adverseEventIdsAndTerms[count]=allAdverseEncountersIdsAndTermsResultsArray[i];
					count++;
					console.log(" not found "+i+" : "+allAdverseEncountersIdsAndTermsResultsArray[i]);
				}
			}		
		}
		//if adverse event array is zero that means all adverse terms outcomes are finished or any adverse event is not reported yet
		if(adverseEventIdsAndTerms.length &lt;= 0 ){
		<ifMode mode='ENTER' > 
			alert("Please fill PMDT-Adverse Event Form first");
		</ifMode>
			return false;//means no active AE is found
		}
		else{
			populate(adverseEventIdsAndTerms);
			return true;//means active AE list found.
		}
}
//2

function populate(adverseEventIdsAndTerms) {
						
	var list= document.getElementById('adverse_event_id_term_list');
	
	for (i = 0; i &lt; adverseEventIdsAndTerms.length; i++) { 
		list.options[i+1]= new Option(adverseEventIdsAndTerms[i]);                      
	}
}

//6  onset
function getRelatedAdverseEventOnsetDate(adverseEventIdAndTerm){
		console.log("on select adverse:"+adverseEventIdAndTerm);
		
		var allAdverseEncountersIdsAndTerms = "<lookup complexExpression="#foreach($encounter in $fn.allEncounters('77b4254d-afab-4b3a-aff3-584e79b2c1e5'))  $fn.getObs($encounter, '166075').getValueAsString($!{locale}) #end"/>";		
		var allAdverseEncountersIdsAndTermsResults = allAdverseEncountersIdsAndTerms.replace(/\s\s+/g, '@');
        var allAdverseEncountersIdsAndTermsResultsArray = allAdverseEncountersIdsAndTermsResults.split('@');
		
		//if AE list selection is invalid or empty
		if( allAdverseEncountersIdsAndTermsResultsArray.length==1 || adverseEventIdAndTerm=='' || adverseEventIdAndTerm=="Please Select Adverse Event ID and Term"){
			console.log("adverse list invalid or empty ");
			return "";
		}
		
		var index=0;
		for(j = 0; j &lt; allAdverseEncountersIdsAndTermsResultsArray.length; j++){
			if(allAdverseEncountersIdsAndTermsResultsArray[j].trim()==adverseEventIdAndTerm.trim()){
				index = j;
				console.log("adverse found at j "+j+allAdverseEncountersIdsAndTermsResultsArray[j].trim()+"=="+adverseEventIdAndTerm.trim());
			}	
		}
		
		var allAdverseEncountersOnsetDate = "<lookup complexExpression="#foreach($encounter in $fn.allEncounters('77b4254d-afab-4b3a-aff3-584e79b2c1e5'))  $fn.getObs($encounter, '165198').getValueAsString($!{locale}) #end"/>";		
		var allAdverseEncountersOnsetDateResults = allAdverseEncountersOnsetDate.replace(/\s\s+/g, '@');
        var allAdverseEncountersOnsetDateResultsArray = allAdverseEncountersOnsetDateResults.split('@');
		
		console.log("adverse list onset date index: "+index);
		return allAdverseEncountersOnsetDateResultsArray[index];
		
}
/*
function getAdverseEventOnsetDate(){
		
		var allAdverseEncountersOnset = "<lookup complexExpression="#foreach($encounter in $fn.allEncounters('77b4254d-afab-4b3a-aff3-584e79b2c1e5'))  $fn.getObs($encounter, '165198').getValueAsString($!{locale}) #end"/>";		
		var allAdverseEncountersOnsetResults = allAdverseEncountersOnset.replace(/\s\s+/g, '@');
        var allAdverseEncountersOnsetResultsArray = allAdverseEncountersOnsetResults.split('@');
		var adverseEventOnsetDate = allAdverseEncountersOnsetResultsArray[allAdverseEncountersOnsetResultsArray.length-1];
		return adverseEventOnsetDate;
		
}
*/
//6 onset

//8 date
function isFutureDate() {
	
	var outcomeDate =getValue('date_adverse_event_outcome.value');	
    currentDate = new Date();
    outcomeDate = new Date(outcomeDate);
	
	currentDate.setHours(0,0,0,0);
	outcomeDate.setHours(0,0,0,0);
	
	var timeDiff = currentDate.getTime() - outcomeDate.getTime();
	var diffDays = Math.floor(timeDiff / (1000 * 3600 * 24));
  
	console.log("diffDays in future: "+diffDays);
	//false if date is today or past //true if date is future
	if(diffDays &gt;= 0){
		return false;
	}
	else{
		return true;
	}
	
}
function checkOnsetDate() {
	var onsetDate =getValue('date_adverse_event_onset.value');
	var outcomeDate =getValue('date_adverse_event_outcome.value');
	
    onsetDate = new Date(onsetDate);
    outcomeDate = new Date(outcomeDate);
	
	onsetDate.setHours(0,0,0,0);
	outcomeDate.setHours(0,0,0,0);
	
	var timeDiff = outcomeDate.getTime() - onsetDate.getTime();
	var diffDays = Math.floor(timeDiff / (1000 * 3600 * 24));
  
	console.log("diffDays: "+diffDays);
	//true if diff is one day //false if diff is in negative or same day
	if(diffDays &gt;= 1){
		return true;
	}
	else{
		return false;
	}
}

function checkReviewDate() {

	var allAdverseReviewIdAndTerms = "<lookup complexExpression="#foreach($encounter in $fn.allEncounters('45976b22-a376-4cb9-a12d-ace7044772b6'))  $fn.getObs($encounter, '166075').getValueAsString($!{locale}) #end"/>";		
	var allAdverseReviewIdAndTermsResults = allAdverseReviewIdAndTerms.replace(/\s\s+/g, '@');
	var allAdverseReviewIdAndTermsResultsArray = allAdverseReviewIdAndTermsResults.split('@');

	//if review form is not filled then return true
	if(allAdverseReviewIdAndTermsResultsArray.length==1){
		console.log("review form is not filled yet");
		return true;
	}
	
	var index=-1;
	for(j = 0; j &lt; allAdverseReviewIdAndTermsResultsArray.length; j++){
		if(allAdverseReviewIdAndTermsResultsArray[j].trim()== getValue('adverse_event_id_term.value').trim()){
			index = j;
			console.log("adverse review date found at j "+j+allAdverseReviewIdAndTermsResultsArray[j].trim()+"=="+getValue('adverse_event_id_term.value').trim());
		}	
	}
	
	//if review date is not filled for that AE term then return true
	if(index==-1){
		console.log("review form for that AE is not filled");
		return true;
	}
	
	var allAdverseReviewDate = "<lookup complexExpression="#foreach($encounter in $fn.allEncounters('45976b22-a376-4cb9-a12d-ace7044772b6'))  $fn.getObs($encounter, '165322').getValueAsString($!{locale}) #end"/>";		
	var allAdverseReviewDateResults = allAdverseReviewDate.replace(/\s\s+/g, '@');
    var allAdverseReviewDateResultsArray = allAdverseReviewDateResults.split('@');
		
	console.log("adverse review date index: "+index);
	var reviewDate = allAdverseReviewDateResultsArray[index];
	var outcomeDate =getValue('date_adverse_event_outcome.value');
	console.log(" review date is: "+reviewDate);
    reviewDate = new Date(reviewDate);
    outcomeDate = new Date(outcomeDate);
	
	reviewDate.setHours(0,0,0,0);
	outcomeDate.setHours(0,0,0,0);
	
	var timeDiff = outcomeDate.getTime() - reviewDate.getTime();
	var diffDays = Math.floor(timeDiff / (1000 * 3600 * 24));
  
	console.log("diffDays: "+diffDays);
	//true if diff is one day or more days //false if diff is in negative or same day
	if(diffDays &gt;= 1){
		return true;
	}
	else{
		return false;
	}
}

//8 date


//3
function isAdverseEventFormFilled(){
		var isFilled=true;
		<ifMode mode='EDIT' > 
			return true;
		</ifMode>
//
		var allAdverseEncountersIdsAndTerms = "<lookup complexExpression="#foreach($encounter in $fn.allEncounters('77b4254d-afab-4b3a-aff3-584e79b2c1e5'))  $fn.getObs($encounter, '166075').getValueAsString($!{locale}) #end"/>";		
		var allAdverseEncountersIdsAndTermsResults = allAdverseEncountersIdsAndTerms.replace(/\s\s+/g, '@');
        var allAdverseEncountersIdsAndTermsResultsArray = allAdverseEncountersIdsAndTermsResults.split('@');

		var allAdverseOutcomeEncountersIdsAndTerms = "<lookup complexExpression="#foreach($encounter in $fn.allEncounters('4e17094b-13f4-46c4-b6fa-bafe544be791'))  $fn.getObs($encounter, '166075').getValueAsString($!{locale}) #end"/>";		
		var allAdverseOutcomeEncountersIdsAndTermsResults = allAdverseOutcomeEncountersIdsAndTerms.replace(/\s\s+/g, '@');
        var allAdverseOutcomeEncountersIdsAndTermsResultsArray = allAdverseOutcomeEncountersIdsAndTermsResults.split('@');
		
		var adverseEventIdsAndTerms=[];
		var count=0;
		//if adverse outcome form is not filled then add all adverse event reported in list
		if(allAdverseOutcomeEncountersIdsAndTermsResultsArray.length==1){
			console.log(" adverse out not filled");
			for(k = 1; k &lt; allAdverseEncountersIdsAndTermsResultsArray.length; k++){
				adverseEventIdsAndTerms[count]=allAdverseEncountersIdsAndTermsResultsArray[k];
				count++;
				console.log(" adverse array "+k+" : "+allAdverseEncountersIdsAndTermsResultsArray[k]);
			}
		}
		//else if advese outcome form is filled then campare adverse event and adverse outcome terms and make list for AE that are not finished yet
		else{
			console.log(" adverse out filled");
			for(i = 1; i &lt; allAdverseEncountersIdsAndTermsResultsArray.length; i++){	
				var found = false;
				for(j = 1; j &lt; allAdverseOutcomeEncountersIdsAndTermsResultsArray.length; j++){
					if(allAdverseEncountersIdsAndTermsResultsArray[i].trim()==allAdverseOutcomeEncountersIdsAndTermsResultsArray[j].trim()){
						found = true;
						console.log("found at i "+i+" at j "+j+allAdverseEncountersIdsAndTermsResultsArray[i].trim()+"=="+allAdverseOutcomeEncountersIdsAndTermsResultsArray[j].trim());
					}	
				}
				if(!found){
					//if not found then it means that that particalur AE outcome is not finsihed yet. so add it to list of active AE.
					adverseEventIdsAndTerms[count]=allAdverseEncountersIdsAndTermsResultsArray[i];
					count++;
					console.log(" not found "+i+" : "+allAdverseEncountersIdsAndTermsResultsArray[i]);
				}
			}		
		}
		//if adverse event array is zero that means all adverse terms outcomes are finished or any adverse event is not reported yet
		if(adverseEventIdsAndTerms.length &lt;= 0 ){
			return false;//means no active AE is found
		}
		else{
			return true;//means active AE list found.
		}
//
}	
//3

jQuery(function() {
					
			getField('adverse_event_outcome_serious.value').change(function() {
				if(getValue('adverse_event_outcome_serious.value') == 1065 ){
					adverse_event_serious_criterion.show();
				}			
				else{
					setValue('adverse_event_serious_criterion.value','');
					adverse_event_serious_criterion.hide();
				}
			});
			
			jQuery("#adverse_event_id_term_list").change(function() {
			  setValue('adverse_event_id_term.value',jQuery("#adverse_event_id_term_list").val());  
			  //5 onset
			  var adverseEventIdAndTerm=jQuery("#adverse_event_id_term_list").val();
			  setValue('date_adverse_event_onset.value',getRelatedAdverseEventOnsetDate(adverseEventIdAndTerm));
			  //5 onset
			});
			
			//repeat logic start
			///////////////////////////////////////////////////////////////////////////
			getField('tb_drug_related_adverse_event.value').change(function() {
				
				if(getValue('tb_drug_related_adverse_event.value') != 1065 ){
					for(var i=1; i &lt; repeatLimit; i++ ){
						//set values to empty
							setValue((i)+'-tb_regimen.value','');
							setValue((i)+'-ae_related_tb_drug_action.value','');
					}
					repeat_container.hide();
				}
				else{
					jQuery("#"+1+"-toggleContainer").toggle(true);//fix for edit mode show
					repeat_container.show();
				}
			});
			//repeat logic end
			//////////////////////////////////////////////////////////////////////////////

});

		
beforeSubmit.push(function() {

		setValue('adverse_event_serious_criterion.error','');
		setValue('non_tb_drugs.error','');
		setValue('adverse_event_id_term.error','');
		setValue('date_adverse_event_onset.error','');
		//9 required
		setValue('adverse_event_outcome_serious.error','');
		setValue('adverse_event_outcome.error','');
		//9 required
		
		var valid=true;
		//4
		if(!isAdverseEventFormFilled()){		
			getField('date_adverse_event_onset.error').html('Please fill PMDT-Adverse Event Form first').show();						
			valid = false;
		}
		else{
			getField('date_adverse_event_onset.error').html('').hide(); 
		}
	
		if(isAdverseEventFormFilled() &amp;&amp;  ( getValue('adverse_event_id_term.value') == "Please Select Adverse Event ID and Term"
			|| getValue('adverse_event_id_term.value') == "")){
				getField('adverse_event_id_term.error').html('Please Select Correct Adverse Event ID and Term').show();	
				valid = false;
		}
		else if(!isAdverseEventFormFilled()){	
			getField('adverse_event_id_term.error').html('Please fill PMDT-Adverse Event Form first').show();
			valid = false;
		}
		else{
			getField('adverse_event_id_term.error').html('').hide(); 
		}
		//4
		
		//7 date
		setValue('date_adverse_event_outcome.error','');
		if(valid){
			if(getValue('date_adverse_event_outcome.value')==''){
				getField('date_adverse_event_outcome.error').html('Please select a Date').show();						
				valid = false;
			}
			else if(isFutureDate()){
				getField('date_adverse_event_outcome.error').html('Adverse Event Outcome date can not be in Future. Please Select Correct date').show();						
				valid = false;
			}
			else if(!checkOnsetDate()){
				getField('date_adverse_event_outcome.error').html('Adverse Event Outcome date can not be before or on the same Adverse Event date. Please Select Correct date').show();						
				valid = false;
			}
			else if(!checkReviewDate()){
				getField('date_adverse_event_outcome.error').html('Adverse Event Outcome date can not be before or on the same Adverse Event Review date. Please Select Correct date').show();						
				valid = false;
			}
			else{
				getField('date_adverse_event_outcome.error').html('').hide(); 
			}
		}	
		//7 date
		
		if(getValue('adverse_event_outcome_serious.value') == 1065 &amp;&amp; getValue('adverse_event_serious_criterion.value')=="" ){
			getField('adverse_event_serious_criterion.error').html('Please select a value.').show();
			valid=false;
		}			
		else{
			getField('adverse_event_serious_criterion.error').html('').hide();
		}
		
		//
		if( ! (getValue('adverse_event_outcome_serious.value') == 1065)){
			setValue('adverse_event_serious_criterion.value', "");    
		}
		//
		
		if (jQuery("#display_adverse_event_other_cause_child input[type=checkbox]:checked").length > 0)
		{
			adverse_event_other_cause_check = true;
		}
		else
		{
			adverse_event_other_cause_check = false;
		}
		
		if( adverse_event_other_cause_check == false) {
		   getField('non_tb_drugs.error').html('Please select a value.').show();
		   valid=false;	   
		}
		else{
			getField('non_tb_drugs.error').html('').hide();
		}
			
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//repeat logic start
		for(var i=1; i &lt; repeatLimit; i++ ){
			setValue((i)+'-tb_regimen.error','');
			setValue((i)+'-ae_related_tb_drug_action.error','');	
		}

		if(getValue('tb_drug_related_adverse_event.value') != 1065 ){
			for(var i=1; i &lt; repeatLimit; i++ ){
				//set values to empty
					setValue((i)+'-tb_regimen.value','');
					setValue((i)+'-ae_related_tb_drug_action.value','');
			}
		}
		
		if(getValue('tb_drug_related_adverse_event.value') == 1065 ){
		 
			for(var i=1; i &lt; repeatLimit; i++ ){
				if(jQuery("#"+(i)+"-toggleContainer").is(":visible") &amp;&amp; getValue((i)+'-tb_regimen.value') == "" ){
					getField((i)+'-tb_regimen.error').html('Please select a value.').show();
					valid=false;
				}
				else {
					getField((i)+'-tb_regimen.error').html('').hide();
				}
			}
		}
		
		if(getValue('tb_drug_related_adverse_event.value') == 1065 ){
			for(var i=1; i &lt; repeatLimit; i++ ){
				if(jQuery("#"+(i)+"-toggleContainer").is(":visible") &amp;&amp; getValue((i)+'-ae_related_tb_drug_action.value') == "" ){
					getField((i)+'-ae_related_tb_drug_action.error').html('Please select a value.').show();
					valid=false;
				}
				else {
					getField((i)+'-ae_related_tb_drug_action.error').html('').hide();
				}
			}
		}
		
		//remove values from hidden boxes
		for(var i=1; i &lt; repeatLimit; i++ ){
			//set values to empty
			if( ! jQuery("#"+(i)+"-toggleContainer").is(":visible") ){
				setValue((i)+'-tb_regimen.value','');
				setValue((i)+'-ae_related_tb_drug_action.value','');
			}
		}
		
		//repeat logic end
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		//10 required check for repeat
		if(valid){
			if(getValue('adverse_event_outcome_serious.value') == "" ){
				getField('adverse_event_outcome_serious.error').html('Please select a value.').show();
				valid=false;
			}			
			else{
				getField('adverse_event_outcome_serious.error').html('').hide();
			}
			if(getValue('adverse_event_outcome.value') == "" ){
				getField('adverse_event_outcome.error').html('Please select a value.').show();
				valid=false;
			}			
			else{
				getField('adverse_event_outcome.error').html('').hide();
			}
		}	
		//10 required
		
		if(valid==true){
		
			getField("adverse_event_id_term.value").prop("disabled", false);
			getField("date_adverse_event_onset.value").prop("disabled", false);
			
			var timeTakenDiv = $j("#time_taken_div");
			
			var endDate = new Date();
			var timeDiff = Math.abs(endDate.getTime() - startDate.getTime());
			var diffSec = timeDiff/1000;
			
			timeTakenDiv.show();
			setValue("time_taken.value",diffSec);
			timeTakenDiv.hide();
	
			return true;
		}

		
	return false;
});
	
</script>

</htmlform>